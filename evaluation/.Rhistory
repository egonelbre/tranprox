matrix(mat[,2:5])
matrix(mat[,2:5], nrow=3)
linear = function(x, xlen, i, n){
xlow = (i-0.5)*n/xlen
xhigh = (i+0.5)*n/xlen
li = clamp(xlow, 1, i)
hi = clamp(xhigh, i, n)
count = hi - li + 1
slice = matrix(mat[,li:hi], nrow=3)
rowSums(slice)/count
}
mat2 = interpolate3(mat, 10, linear)
plotLine(mat2, 2)
plotLine(mat, 3)
mat2 = interpolate3(mat, 50, linear)
plotLine(mat2, 2)
interpolate3 = function(mat, n, kernel){
len = dim(mat)[2]
apply(matrix(1:n), 1, function(i){ kernel(mat, len, i, n) })
}
mat2 = interpolate3(mat, 50, linear)
amp = function(value, low, high){
if(value < low) low
else if (value > high) high
value
}
clamp = function(value, low, high){
if(value < low) low
else if (value > high) high
value
}
# interpolated
mat2 = interpolate3(mat, 50, linear)
plotLine(mat2, 2)
mat2 = interpolate3(mat, 70, linear)
plotLine(mat2, 2)
close3d()
open3d()
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 3)
# interpolated
mat2 = interpolate3(mat, 70, linear)
plotLine(mat2, 2)
mat2 = interpolate3(mat, 100, linear)
plotLine(mat2, 2)
mat2 = interpolate3(mat, 50, linear)
plotLine(mat2, 2)
linear = function(x, xlen, i, n){
xlow = (i-0.5)*n/xlen
xhigh = (i+0.5)*n/xlen
li = clamp(xlow, 1, i)
hi = clamp(xhigh, i, n)
count = hi - li
slice = matrix(mat[,li:hi], nrow=3)
rowSums(slice)/count
}
mat2 = interpolate3(mat, 50, linear)
plotLine(mat2, 2)
linear = function(x, xlen, i, n){
xlow = (i-0.5)*n/xlen
xhigh = (i+0.5)*n/xlen
li = clamp(xlow, 1, i)
hi = clamp(xhigh, i, n)
count = hi - li + 1
slice = matrix(mat[,li:hi], nrow=3)
rowSums(slice)/count
}
mat2 = interpolate3(mat, 5, linear)
plotLine(mat2, 2)
open3d()
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 3)
# interpolated
mat2 = interpolate3(mat, 5, linear)
plotLine(mat2, 2)
rgl.bringtotop()
plotLine(mat2, 2)
# interpolated
mat2 = interpolate3(mat, 5, linear)
plotLine(mat2, 2)
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 3)
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 3)
# interpolated
mat2 = interpolate3(mat, 50, linear)
plotLine(mat2, 2)
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
rstudio::viewData(mat)
fix(mat2)
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = floor(xi)
hi = ceiling(xi)
if( li - hi ){
matrix(x[,li])
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
rstudio::viewData(mat)
fix(mat2)
fix(mat2)
mat2[,1]
mat2[,2]
mat2[1]
mat2[2]
mat2[3]
mat2[4]
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
if( li - hi ){
x[,li]
} else {
p = xi - li
x[,li]*(1-p) + x[,hi]*p
}
}
mat2
mat2[,4]
mat[,4]
mat[,4.1]
mat[,4.2]
mat[,4.5]
mat[,4.6]
mat[,4.9]
linear = function(x, xlen, i, n){
xlow = floor((i-0.5)*n/xlen)
xhigh = ceiling((i+0.5)*n/xlen)
li = clamp(xlow, 1, i)
hi = clamp(xhigh, i, n)
count = hi - li + 1
slice = matrix(mat[,li:hi], nrow=3)
rowSums(slice)/count
}
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 3)
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
mat2 = interpolate3(mat, 50, linear)
plotLine(mat2, 2)
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
if( li == hi ){
x[,li]
} else {
p = xi - li
x[,li]*(1-p) + x[,hi]*p
}
}
mat2 = interpolate3(mat, 50, linear)
plotLine(mat2, 2)
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
interpolate3 = function(mat, n, kernel){
len = dim(mat)[2]
matrix(apply(matrix(1:n), 1, function(i){ kernel(mat, len, i, n) }), nrow=3, ncol=n)
}
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
interpolate3 = function(mat, n, kernel){
len = dim(mat)[2]
res = apply(matrix(1:n), 1, function(i){ kernel(mat, len, i, n) })
matrix(res, nrow=3, ncol=n)
}
rstudio::viewData(mat2)
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
if( li == hi ){
x[,li]
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
rstudio::viewData(mat2)
rstudio::viewData(mat2)
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
print(xi, ":", li, ":", hi, "..\n")
if( li == hi ){
x[,li]
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
mat2 = interpolate3(mat, 50, nearest)
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
cat(xi, ":", li, ":", hi, "..\n")
if( li == hi ){
x[,li]
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
clamp(0.5, 0, 5)
clamp(0.5, 1, 5)
clamp(0.5, 2, 5)
clamp(0.5, 1, 5)
clamp = function(value, low, high){
if(value < low) low
else if (value > high) high
else value
}
clamp(0.5, 1, 5)
clamp(0.5, 2, 5)
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
open3d()
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 3)
# interpolated
mat2 = interpolate3(mat, 50, nearest)
plotLine(mat2, 2)
mat2 = interpolate3(mat, 10, nearest)
plotLine(mat2, 2)
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
cat(xi, ":", li, ":", hi, "..\n")
if( li == hi ){
x[,li]
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
mat2 = interpolate3(mat, 10, nearest)
plotLine(mat2, 2)
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
cat(xi, ":", li, ":", hi, "..\n")
if( li == hi ){
x[,li]
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
mat2 = interpolate3(mat, 10, nearest)
plotLine(mat2, 2)
dim(mat2)
dim(mat2)[2]
dim(mat2)[2]
dim(mat)[2]
nearest = function(x, xlen, i, n){
xi = i*n/xlen
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
cat(xi, ":", li, ":", hi, ":", i, ":", n, ":", xlen, "<\n")
if( li == hi ){
x[,li]
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
mat2 = interpolate3(mat, 10, nearest)
plotLine(mat2, 2)
nearest = function(x, xlen, i, n){
xi = i*xlen/n
li = clamp(floor(xi), 1, n)
hi = clamp(ceiling(xi), 1, n)
cat(xi, ":", li, ":", hi, ":", i, ":", n, ":", xlen, "<\n")
if( li == hi ){
x[,li]
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
linear = function(x, xlen, i, n){
xlow = floor((i-0.5)*xlen/n)
xhigh = ceiling((i+0.5)*xlen/n)
li = clamp(xlow, 1, i)
hi = clamp(xhigh, i, n)
count = hi - li + 1
slice = matrix(mat[,li:hi], nrow=3)
rowSums(slice)/count
}
open3d()
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 3)
# interpolated
mat2 = interpolate3(mat, 10, nearest)
plotLine(mat2, 2)
linear = function(x, xlen, i, n){
xlow = floor((i-0.5)*xlen/n)
xhigh = ceiling((i+0.5)*xlen/n)
li = clamp(xlow, 1, xlen)
hi = clamp(xhigh, 1, xlen)
count = hi - li + 1
slice = matrix(mat[,li:hi], nrow=3)
rowSums(slice)/count
}
mat2 = interpolate3(mat, 10, nearest)
plotLine(mat2, 2)
nearest = function(x, xlen, i, n){
xi = i*xlen/n
li = clamp(floor(xi), 1, xlen)
hi = clamp(ceiling(xi), 1, xlen)
cat(xi, ":", li, ":", hi, ":", i, ":", n, ":", xlen, "<\n")
if( li == hi ){
x[,li]
} else {
p = xi - li
matrix(x[,li]*(1-p) + x[,hi]*p)
}
}
linear = function(x, xlen, i, n){
xlow = floor((i-0.5)*xlen/n)
xhigh = ceiling((i+0.5)*xlen/n)
li = clamp(xlow, 1, xlen)
hi = clamp(xhigh, 1, xlen)
count = hi - li + 1
slice = matrix(mat[,li:hi], nrow=3)
rowSums(slice)/count
}
mat2 = interpolate3(mat, 10, nearest)
plotLine(mat2, 2)
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 3)
mat2 = interpolate3(mat, 10, linear)
plotLine(mat2, 4)
open3d()
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 2)
# interpolated with linear
mat2 = interpolate3(mat, 30, linear)
plotLine(mat2, 3)
# interpolated with nearest
mat2 = interpolate3(mat, 10, nearest)
plotLine(mat2, 4)
rgl.bringtotop()
open3d()
mat = rbind(sin(1:100/10), sin(2+1:100/3), sin(3+1:100/7))
# original
plotLine(mat, 2)
# interpolated with linear
mat2 = interpolate3(mat, 30, linear)
plotLine(mat2, 3)
mat
mat^2
mat - (mat + 1)
(mat - (mat + 1))^2
sum(mat - (mat + 1))^2
sum((mat - (mat + 1))^2)
?rdist
rdist
?fields
plot(interpolate(sin(1:100/10), 10, linear))
plot(sin(1:100/10))
lines(sin(1:100/10))
plot(sin(1:100/10))
plot(sin(1:100/10)) + plot(sin(1+1:100/10))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(sin(1:100/10)) + ggplot(sin(1+1:100/10))
ggplot2(sin(1:100/10)) + ggplot(sin(1+1:100/10))
plot(sin(1:100/10)) + plot(sin(1+1:100/10))
?lines
plot(sin(1:100/10), type="l")
plot(sin(1+1:100/10))
plot(sin(1:100/10), type="l")
lines(sin(1+1:100/10))
plot(sin(1:100/10), type="l", col=2)
lines(sin(1+1:100/10), col=3)
w = sin(1:100/10)
x = sin(1 + 1:100/10)
matlines(rbind(w,x))
?matlines
w = sin(1:100/10)
x = sin(1 + 1:100/10)
matlines(rbind(w,x), add=F)
w = sin(1:100/10)
x = sin(1 + 1:100/10)
matlines(rbind(w,x), add=FALSE)
matplot(rbind(w,x), type="l")
w
c
x
matplot(cbind(w,x), type="l")
cbind(w,x)
compose = function(...){
fns = list(...)
function(seq){
for(i in 1:length(fns)){
seq = fns[i](seq)
}
seq
}
}
mul = function(x){function(y){x * y}}
add = function(x){function(y){x + y}}
f = compose(mul(5),add(1))
f(5)
f
fns = list(1,2,3,4)
length(fns)
fns[1]
fns[[1]]
fns[[3]]
compose = function(...){
fns = list(...)
function(seq){
for(i in 1:length(fns)){
seq = fns[[i]](seq)
}
seq
}
}
f = compose(mul(5),add(1))
f(5)
pairname = function(a,b){
paste('(',a,',',b,')', sep="")
}
x = list(1,2,3)
y = list(4,5,6)
outer(x,y,pairname)
?kmeans
distance = dist(dist.comp)
cluster = hclust(distance, method="ward")
plot(cluster, hang=-1, label=data)
cluster.composite = cutree(cluster, 7)
source('input.r')
source('algorithm.r')
source("graph.r")
source('transformations.r')
source('distances.r')
setwd("F:/dev/school/ut/mining/project/evaluation")
source('input.r')
source('algorithm.r')
source("graph.r")
source('transformations.r')
source('distances.r')
data = readSequences("dna8.csv")
labels = as.matrix(louter(data, data, pairname))
dist.levenshtein = runcross(data, compose(), levenshtein)
dist.none = runcross(data, compose(convertToMatrix), euclidean)
dist.fourier = runcross(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = runcross(data, compose(convertToMatrix, haar), euclidean)
distance = dist(dist.comp)
cluster = hclust(distance, method="ward")
plot(cluster, hang=-1, label=data)
cluster.composite = cutree(cluster, 7)
distance = dist(dist.levenshtein)
cluster = hclust(distance, method="ward")
plot(cluster, hang=-1, label=data)
cluster.levenshtein = cutree(cluster, 7)
dist.comp = dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011
distance = dist(dist.comp)
cluster = hclust(distance, method="ward")
plot(cluster, hang=-1, label=data)
cluster.composite = cutree(cluster, 7)
distance = dist(dist.levenshtein)
cluster = hclust(distance, method="ward")
plot(cluster, hang=-1, label=data)
cluster.levenshtein = cutree(cluster, 7)
cluster.composite
cluster.composite
cluster.levenshtein
?cluster.d
?cluster.stats
library(fpc)
install.packages("fpc")
library(fpc)
cluster.stats(d, cluster.composite, cluster.levenshtein)
?cluster.stats
cluster.stats(dist.comp*0, cluster.composite, cluster.levenshtein)
cluster.stats(dist.comp*0, cluster.levenshtein, cluster.levenshtein)
cluster.stats(dist.comp*0, cluster.composite, cluster.levenshtein)
cluster.composite
cluster.levenshtein
cluster.levenshtein - cluster.composite
cbind(cluster.levenshtein, cluster.composite)
rbind(cluster.levenshtein, cluster.composite)
