dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
matplot(cbind(dist.levenshtein, dist.none, lapply(dist.fourier, Mod), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
manhattan = function(m1, m2){
sum(abs(m1-m2))
}
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
matplot(cbind(dist.levenshtein, dist.none, lapply(dist.fourier, Mod), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, lapply(dist.fourier, Mod), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, lapply(dist.fourier, Mod)/50, lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, lapply(dist.fourier, Mod)/50, lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, lapply(dist.fourier, Mod)/50, lapply(dist.haar, Mod)), type="l", axes=FALSE)
adjust = (data, amount){
lapply(data, function(x){Mod(x)/amount})
}
matplot(cbind(dist.levenshtein, dist.none, adjust(dist.fourier, 5), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, adjust(dist.fourier, 5), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
adjust = (data, amount){
lapply(data, function(x){Mod(x)/amount})
}
matplot(cbind(dist.levenshtein, dist.none, adjust(dist.fourier, 5), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
adjust = (data, amount){
lapply(data, function(x){Mod(x)/amount})
}
adjust = function(data, amount){
lapply(data, function(x){Mod(x)/amount})
}
matplot(cbind(dist.levenshtein, dist.none, adjust(dist.fourier, 5), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, adjust(dist.fourier, 6), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, adjust(dist.fourier, 8), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, adjust(dist.fourier, 10), lapply(dist.haar, Mod)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
dist.none + dist.fourier
add = function(a,b){
lapply(seq(a), function(x){a[[x]] + b[[x]]})
}
dist.haar
matplot(cbind(dist.levenshtein, dist.none, dist2.fourier, dist.haar, add(dist2.fourier, dist.haar)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
dist2.fourier = adjust(dist.fourier, 10)
matplot(cbind(dist.levenshtein, dist.none, dist2.fourier, dist.haar, add(dist2.fourier, dist.haar)), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
run = function(data, transform, distance){
transformed = lapply(data, transform)
distances = louter(transformed, transformed, distance)
as.vector(distances)
}
labels = as.matrix(louter(data, data, pairname))
dist.levenshtein = run(data, compose(), levenshtein)
dist.none = run(data, compose(convertToMatrix), euclidean)
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = run(data, compose(convertToMatrix, haar), euclidean)
dist.fourier
as.vector(dist.fourier)
as.matrix(dist.fourier)
as.vector(as.matrix(dist.fourier))
run = function(data, transform, distance){
transformed = lapply(data, transform)
distances = louter(transformed, transformed, distance)
as.matrix(distances)
}
dist.levenshtein = run(data, compose(), levenshtein)
dist.none = run(data, compose(convertToMatrix), euclidean)
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = run(data, compose(convertToMatrix, haar), euclidean)
dist.fourier
dist.fourier/50
dist.fourier
dist.fourier/50
t(dist.fourier)/50
dist.fourier
t(dist.fourier)
t(dist.fourier)*0.5
class(dist.fourier)
class(as.vector(dist.fourier))
run = function(data, transform, distance){
transformed = lapply(data, transform)
distances = louter(transformed, transformed, distance)
unlist(distances)
}
dist.levenshtein = run(data, compose(), levenshtein)
dist.none = run(data, compose(convertToMatrix), euclidean)
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = run(data, compose(convertToMatrix, haar), euclidean)
dist.haar
dist.fourier
dist.fourier
unlist
run = function(data, transform, distance){
transformed = lapply(data, transform)
distances = louter(transformed, transformed, distance)
distances
}
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
dist.fourier
dist.fourier = run(data, compose(convertToMatrix, fourier), euclidean)
dist.fourier
run = function(data, transform, distance){
transformed = lapply(data, transform)
distances = louter(transformed, transformed, distance)
unlist(distances)
}
matplot(cbind(dist.levenshtein, dist.none, dist.fourier/12, dist.haar, dist.fourier/12 + dist.haar), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
dist.fourier
dist.levenshtein = run(data, compose(), levenshtein)
dist.none = run(data, compose(convertToMatrix), euclidean)
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = run(data, compose(convertToMatrix, haar), euclidean)
matplot(cbind(dist.levenshtein, dist.none, dist.fourier/12, dist.haar, dist.fourier/12 + dist.haar), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none, dist.fourier/12, dist.haar, dist.fourier/24 + dist.haar/2), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none, dist.fourier/12, dist.haar, dist.comp), type="l", axes=FALSE)
axis(2)
axis(3, pos=8, seq(labels), labels, las=2, cex.axis=0.7)
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none, dist.fourier/12, dist.haar, dist.comp), type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels), labels, las=2, cex.axis=0.7)
data = readSequences("dna8.csv")[1:8]
labels = as.matrix(louter(data, data, pairname))
dist.levenshtein = run(data, compose(), levenshtein)
dist.none = run(data, compose(convertToMatrix), euclidean)
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = run(data, compose(convertToMatrix, haar), euclidean)
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none, dist.fourier/12, dist.haar, dist.comp), type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels), labels, las=2, cex.axis=0.7)
?lm
lm(dist.levenshtein ~ dist.none + dist.fourier + dist.haar)
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none * 2.98 - dist.fourier*0.04 - dist.haar*0.05), type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels), labels, las=2, cex.axis=0.7)
data = readSequences("dna8.csv")
labels = as.matrix(louter(data, data, pairname))
dist.levenshtein = run(data, compose(), levenshtein)
dist.none = run(data, compose(convertToMatrix), euclidean)
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = run(data, compose(convertToMatrix, haar), euclidean)
lm(dist.levenshtein ~ dist.none + dist.fourier + dist.haar)
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011), type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011)[1:100], type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels), labels, las=2, cex.axis=0.7)
matplot(cbind(dist.levenshtein, dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011)[1:100], type="l", axes=FALSE)
axis(2)
matplot(cbind(dist.levenshtein, dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011)[1:100,], type="l", axes=FALSE)
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011)[1:100,], type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels), labels[1:100], las=2, cex.axis=0.7)
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011)[1:100,], type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels), labels[[1:100]], las=2, cex.axis=0.7)
labels
labels[1:100,]
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011)[1:100,], type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels), labels[1:100,], las=2, cex.axis=0.7)
axis(2)
axis(3, pos=6, seq(labels[1:100,]), labels[1:100,], las=2, cex.axis=0.7)
labels[1,100]
labels[1:100,]
dist.comp = (dist.fourier/12 + dist.haar)/1.6
matplot(cbind(dist.levenshtein, dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011)[1:100,], type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels[1:100,]), labels[1:100,], las=2, cex.axis=0.7)
data = readSequences("dna8.csv")
labels = as.matrix(louter(data, data, pairname))
dist.levenshtein = run(data, compose(), levenshtein)
dist.none = run(data, compose(convertToMatrix), euclidean)
dist.fourier = run(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = run(data, compose(convertToMatrix, haar), euclidean)
lm(dist.levenshtein ~ dist.none + dist.fourier + dist.haar)
dist.comp = dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011
dist.comp = dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011
matplot(cbind(dist.levenshtein, dist.comp)[1:100,], type="l", axes=FALSE)
axis(2)
axis(3, pos=6, seq(labels[1:100,]), labels[1:100,], las=2, cex.axis=0.7)
dist.coomp
dist.comp
lcross = function(x, y, f){
xn = length(x)
yn = length(y)
i = 1
res = matrix(nrow=xn, ncol=yn)
for(xi in 1:xn ){
for(yi in 1:yn ){
res[xi,yi] = f(x[[xi]], y[[yi]])
i = i + 1
}
}
res
}
runcross = function(data, transform, distance){
transformed = lapply(data, transform)
distances = lcross(transformed, transformed, distance)
distances
}
dist.levenshtein = runcross(data, compose(), levenshtein)
dist.none = runcross(data, compose(convertToMatrix), euclidean)
dist.fourier = runcross(data, compose(convertToMatrix, fourier), manhattan)
dist.haar = runcross(data, compose(convertToMatrix, haar), euclidean)
lm(dist.levenshtein ~ dist.none + dist.fourier + dist.haar)
dist.comp = dist.none * 1.51 + dist.fourier*0.013 - dist.haar*0.011
dist.comp
labels
data
cluster = hclust(dist.comp, method="average")
length(dist.comp)
dist
dist.comp
?dist
dist(dist.comp)
cluster = hclust(distance, method="average")
distance = dist(dist.comp)
cluster = hclust(distance, method="average")
plot(cluster, hang=-1, label=labels)
plot(cluster, hang=-1, label=data)
distance = dist(dist.levenshtein)
cluster = hclust(distance, method="average")
plot(cluster, hang=-1, label=data)
?cluster
?hclust
distance = dist(dist.comp)
cluster = hclust(distance, method="ward")
plot(cluster, hang=-1, label=data)
par(mfrow=c(2,1))
distance = dist(dist.comp)
cluster = hclust(distance, method="ward")
plot(cluster, hang=-1, label=data)
distance = dist(dist.levenshtein)
cluster = hclust(distance, method="ward")
plot(cluster, hang=-1, label=data)
library(igraph)
install.packages("igraph")
library(igraph)
g = graph.adjacency(dist.comp, weighted=T, mode = "undirected")
?graph.adjacency
dist.comp
colnames(dist.comp) = data
dist.comp
colnames(dist.levenshtein) = data
rownames(dist.levenshtein) = data
g = graph.adjacency(dist.comp, weighted=T, mode = "undirected")
g = simplify(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
g = graph.adjacency(dist.comp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
par(mfrow=c(1,1))
plot(g, layout=layout1)
g = graph.adjacency(dist.comp, weighted=F, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
dist.comp
max(dist.comp)
g = graph.adjacency(10-dist.comp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
plot(g, layout=layout1)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
dist.comp
10-dist.comp
10-dist.comp
dist.comp
g = graph.adjacency(1+dist.comp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
degree(g)
dist.comp
dist.comp
floor(dist.comp)
floor(10-dist.comp)
10-dist.comp
min(10-dist.comp)
min(10-dist.comp) < 4
sum(min(10-dist.comp) < 4)
sum(min(10-dist.comp) <= 4)
dist.comp
dist.comp > 6
dist.comp > 6
sum(dist.comp > 6)
sum(dist.comp > 7)
sum(dist.comp > 5)
temp = dist.comp*(dist.comp > 5)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
temp = dist.comp*(dist.comp > 4)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
temp
temp
temp = dist.comp*(dist.comp > 4)
temp
dist.comp > 4
temp = dist.comp*(dist.comp < 5)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
temp = dist.comp*(dist.comp < 3)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
10-dist.comp
10-dist.comp < 3
10-dist.comp < 8
10-dist.comp < 7
10-dist.comp < 6
10-dist.comp > 6
temp = dist.comp*(10-dist.comp > 6)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
temp = dist.comp*(10-dist.comp > 7)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
temp = dist.comp*(10-dist.comp > 6)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
function plotgraph(dist){
temp = dist*(10-dist > 6)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
}
plotgraph = function(dist){
temp = dist*(10-dist > 6)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
}
plotgraph(dist.levenshtein)
plotgraph = function(dist){
temp = dist*(10-dist > 5)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
}
plotgraph(dist.levenshtein)
plotgraph = function(dist){
temp = dist*(10-dist > 6)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
layout1 = layout.fruchterman.reingold(g)
plot(g, layout=layout1)
}
plotgraph(dist.levenshtein)
?layout.fruchterman.reingold
plotgraph = function(dist){
temp = dist*(10-dist > 6)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
#layout1 = layout.fruchterman.reingold(g)
layout1 = layout.spring(g)
plot(g, layout=layout1)
}
plotgraph(dist.levenshtein)
plotgraph = function(dist){
temp = dist*(10-dist > 6)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
#layout1 = layout.fruchterman.reingold(g)
layout1 = layout.auto(g)
plot(g, layout=layout1)
}
plotgraph(dist.levenshtein)
plotgraph(dist.comp)
plotgraph = function(dist){
temp = dist*(10-dist > 7)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
#layout1 = layout.fruchterman.reingold(g)
layout1 = layout.auto(g)
plot(g, layout=layout1)
}
plotgraph(dist.comp)
plotgraph = function(dist){
temp = dist*(10-dist > 6.5)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
#layout1 = layout.fruchterman.reingold(g)
layout1 = layout.auto(g)
plot(g, layout=layout1)
}
plotgraph(dist.comp)
plotgraph = function(dist){
temp = dist*(10-dist > 6)
g = graph.adjacency(temp, weighted=T, mode = "undirected")
g = simplify(g)
V(g)$label = V(g)$name
V(g)$degree = degree(g)
set.seed(3952)
#layout1 = layout.fruchterman.reingold(g)
layout1 = layout.auto(g)
plot(g, layout=layout1)
}
plotgraph(dist.comp)
